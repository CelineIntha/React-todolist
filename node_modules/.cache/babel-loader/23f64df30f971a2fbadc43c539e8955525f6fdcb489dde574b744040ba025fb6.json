{"ast":null,"code":"var _jsxFileName = \"/Users/celine/Desktop/DFS/React/todolist/src/components/ToDoList/Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TaskProps from \"./TaskProps\";\nimport NewTask from \"./NewTask\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Task({\n  index,\n  t,\n  onDelete,\n  onTaskChecked,\n  onTaskUpdate\n}) {\n  _s();\n  // console.log(\"Task Props:\", t);\n  // État local qui permet de gérer l'édition de text et la mise à jour du texte\n  const [isEditing, setIsEditing] = useState(false);\n  const [updatedText, setUpdatedText] = useState(t.name);\n  const handleDelete = () => {\n    onDelete(index);\n    console.log('Suppression  de la tâche : \"' + t.name + '\"');\n  };\n  const handleCheck = () => {\n    onTaskChecked(index);\n    console.log('Validation de la tâche : \"' + t.name + '\"');\n  };\n  const handleUpdateText = () => {\n    // Appelle la fonction onTaskUpdate avec le texte mis à jour\n    onTaskUpdate(updatedText);\n    // Désactive le mode édition\n    setIsEditing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          textDecoration: t.completed ? \"line-through\" : \"none\"\n        },\n        children: [isEditing ?\n        /*#__PURE__*/\n        // Mode édition avec un champ de texte et un bouton qui permet de mettre à jour la tâche\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: updatedText,\n            onChange: e => setUpdatedText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleUpdateText,\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) :\n        /*#__PURE__*/\n        // L'affichage normal avec le texte de la tâche\n        _jsxDEV(_Fragment, {\n          children: [t.name, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsEditing(true),\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: \"pen\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDelete,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: \"xmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Task, \"AFOdODyRygAeBUpM2pOt4Tt9PlU=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","TaskProps","NewTask","FontAwesomeIcon","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","Task","index","t","onDelete","onTaskChecked","onTaskUpdate","_s","isEditing","setIsEditing","updatedText","setUpdatedText","name","handleDelete","console","log","handleCheck","handleUpdateText","children","style","textDecoration","completed","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","_c","$RefreshReg$"],"sources":["/Users/celine/Desktop/DFS/React/todolist/src/components/ToDoList/Task.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport TaskProps from \"./TaskProps\";\nimport NewTask from \"./NewTask\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button } from \"react-bootstrap\";\n\nfunction Task({ index, t, onDelete, onTaskChecked, onTaskUpdate }) {\n  // console.log(\"Task Props:\", t);\n  // État local qui permet de gérer l'édition de text et la mise à jour du texte\n  const [isEditing, setIsEditing] = useState(false);\n  const [updatedText, setUpdatedText] = useState(t.name);\n\n  const handleDelete = () => {\n    onDelete(index);\n    console.log('Suppression  de la tâche : \"' + t.name + '\"');\n  };\n\n  const handleCheck = () => {\n    onTaskChecked(index);\n    console.log('Validation de la tâche : \"' + t.name + '\"');\n  };\n\n  const handleUpdateText = () => {\n    // Appelle la fonction onTaskUpdate avec le texte mis à jour\n    onTaskUpdate(updatedText);\n    // Désactive le mode édition\n    setIsEditing(false);\n  };\n\n  return (\n    <div>\n      <ul>\n        <li style={{ textDecoration: t.completed ? \"line-through\" : \"none\" }}>\n          {isEditing ? (\n            // Mode édition avec un champ de texte et un bouton qui permet de mettre à jour la tâche\n            <>\n              <input\n                type=\"text\"\n                value={updatedText}\n                onChange={(e) => setUpdatedText(e.target.value)}\n              />\n              <button onClick={handleUpdateText}>Update</button>\n            </>\n          ) : (\n            // L'affichage normal avec le texte de la tâche\n            <>\n              {t.name}{\" \"}\n                            {/* Bouton pour activer le mode édition */}\n              <button onClick={() => setIsEditing(true)}>\n                <FontAwesomeIcon icon=\"pen\" />\n              </button>\n            </>\n          )}\n          <button onClick={handleDelete}>\n            <FontAwesomeIcon icon=\"xmark\" />\n          </button>\n          {/* <Button type=\"primary\">Bouton</Button> */}\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Task;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}