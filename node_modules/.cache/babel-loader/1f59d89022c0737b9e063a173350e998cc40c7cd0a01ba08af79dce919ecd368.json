{"ast":null,"code":"var _jsxFileName = \"/Users/celine/Desktop/DFS/React/todolist/src/components/ToDoList/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Task from \"./Task\";\nimport TaskProps from \"./TaskProps\";\nimport NewTask from \"./NewTask\";\nimport \"../Bootstrap/Style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    // Permet de restituer les tâches du localStorage lors du montage du composant\n    const storedTasks = localStorage.getItem(\"tasks\");\n    if (storedTasks) {\n      setTasks(JSON.parse(storedTasks));\n    }\n  }, []); // Le tableau vide signifie que cela ne doit être exécuté qu'une seule fois au montage\n\n  // Fonction qui permet de gérer l'ajout de nouvelles tâches\n  const handleNewTask = newTask => {\n    console.log(\"New Task:\", newTask);\n    setTasks([...tasks, newTask]);\n    // Permet de sauvegarder la nouvelle tâche dans le localStorage\n    localStorage.setItem(\"tasks\", JSON.stringify([...tasks, newTask]));\n  };\n\n  // Fonction qui permet de gérer la suppression des tâches\n  const handleTaskDelete = index => {\n    let newTasksList = [...tasks];\n    newTasksList.splice(index, 1);\n    setTasks(newTasksList);\n    // Permet de sauvegarder la tâche supprimée dans le localStorage\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasksList));\n  };\n\n  // Fonction qui permet de gérer les tâches complétées ou non\n  const handleTaskChecked = index => {\n    let newTasksList = [...tasks];\n    if (newTasksList[index] && typeof newTasksList[index].completed !== \"undefined\") {\n      newTasksList[index].completed = !newTasksList[index].completed;\n      setTasks(newTasksList);\n      // Permet de sauvegarder la tâche validée dans le localStorage\n      localStorage.setItem(\"tasks\", JSON.stringify(newTasksList));\n    }\n  };\n\n  // Fonction qui permet de mettre à jour/modifier une tâche\n  const handleTaskUpdate = (index, updatedText) => {\n    // Crée une copie du tableau des tâches\n    let newTasksList = [...tasks];\n\n    // Vérifie si la tâche à l'index spécifié existe dans le tableau\n    if (newTasksList[index]) {\n      // Met à jour le texte de la tâche avec le nouveau texte\n      newTasksList[index].name = updatedText;\n\n      // Met à jour l'état local avec le nouveau tableau des tâches\n      setTasks(newTasksList);\n      // Permet de sauvegarder la tâche modifiée dans le localStorage\n      localStorage.setItem(\"tasks\", JSON.stringify(newTasksList));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Liste des t\\xE2ches\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewTask, {\n      onSubmit: handleNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), tasks.map((t, index) => /*#__PURE__*/_jsxDEV(Task, {\n      index: index // ajout de index comme propriété\n      ,\n      t: t,\n      onTaskChecked: index => handleTaskChecked(index),\n      onDelete: index => handleTaskDelete(index),\n      onTaskUpdate: updatedText => handleTaskUpdate(index, updatedText)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","Task","TaskProps","NewTask","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","storedTasks","localStorage","getItem","JSON","parse","handleNewTask","newTask","console","log","setItem","stringify","handleTaskDelete","index","newTasksList","splice","handleTaskChecked","completed","handleTaskUpdate","updatedText","name","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","t","onTaskChecked","onDelete","onTaskUpdate","_c","$RefreshReg$"],"sources":["/Users/celine/Desktop/DFS/React/todolist/src/components/ToDoList/TaskList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Task from \"./Task\";\nimport TaskProps from \"./TaskProps\";\nimport NewTask from \"./NewTask\";\nimport \"../Bootstrap/Style.css\";\n\nfunction TaskList() {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    // Permet de restituer les tâches du localStorage lors du montage du composant\n    const storedTasks = localStorage.getItem(\"tasks\");\n    if (storedTasks) {\n      setTasks(JSON.parse(storedTasks));\n    }\n  }, []); // Le tableau vide signifie que cela ne doit être exécuté qu'une seule fois au montage\n\n  // Fonction qui permet de gérer l'ajout de nouvelles tâches\n  const handleNewTask = (newTask) => {\n    console.log(\"New Task:\", newTask);\n    setTasks([...tasks, newTask]);\n    // Permet de sauvegarder la nouvelle tâche dans le localStorage\n    localStorage.setItem(\"tasks\", JSON.stringify([...tasks, newTask]));\n  };\n\n  // Fonction qui permet de gérer la suppression des tâches\n  const handleTaskDelete = (index) => {\n    let newTasksList = [...tasks];\n    newTasksList.splice(index, 1);\n    setTasks(newTasksList);\n    // Permet de sauvegarder la tâche supprimée dans le localStorage\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasksList));\n  };\n\n  // Fonction qui permet de gérer les tâches complétées ou non\n  const handleTaskChecked = (index) => {\n    let newTasksList = [...tasks];\n\n    if (\n      newTasksList[index] &&\n      typeof newTasksList[index].completed !== \"undefined\"\n    ) {\n      newTasksList[index].completed = !newTasksList[index].completed;\n      setTasks(newTasksList);\n      // Permet de sauvegarder la tâche validée dans le localStorage\n      localStorage.setItem(\"tasks\", JSON.stringify(newTasksList));\n    }\n  };\n\n  // Fonction qui permet de mettre à jour/modifier une tâche\n  const handleTaskUpdate = (index, updatedText) => {\n    // Crée une copie du tableau des tâches\n    let newTasksList = [...tasks];\n\n    // Vérifie si la tâche à l'index spécifié existe dans le tableau\n    if (newTasksList[index]) {\n      // Met à jour le texte de la tâche avec le nouveau texte\n      newTasksList[index].name = updatedText;\n\n      // Met à jour l'état local avec le nouveau tableau des tâches\n      setTasks(newTasksList);\n      // Permet de sauvegarder la tâche modifiée dans le localStorage\n      localStorage.setItem(\"tasks\", JSON.stringify(newTasksList));\n    }\n  };\n\n  return (\n    <div>\n      <h1>Liste des tâches</h1>\n\n      {/* J'importe le composant \"NewTask\" qui me permet d'ajouter une nouvelle tâche */}\n      <NewTask onSubmit={handleNewTask} />\n\n      {/* Grâce à la fonction map, j'affiche la liste de mes tâches du tableau tasksList */}\n      {tasks.map((t, index) => (\n        <Task\n          key={index}\n          index={index} // ajout de index comme propriété\n          t={t}\n          onTaskChecked={(index) => handleTaskChecked(index)}\n          onDelete={(index) => handleTaskDelete(index)}\n          onTaskUpdate={(updatedText) => handleTaskUpdate(index, updatedText)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default TaskList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIF,WAAW,EAAE;MACfD,QAAQ,CAACI,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC,CAAC;IACnC;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMK,aAAa,GAAIC,OAAO,IAAK;IACjCC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,OAAO,CAAC;IACjCP,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEQ,OAAO,CAAC,CAAC;IAC7B;IACAL,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACO,SAAS,CAAC,CAAC,GAAGZ,KAAK,EAAEQ,OAAO,CAAC,CAAC,CAAC;EACpE,CAAC;;EAED;EACA,MAAMK,gBAAgB,GAAIC,KAAK,IAAK;IAClC,IAAIC,YAAY,GAAG,CAAC,GAAGf,KAAK,CAAC;IAC7Be,YAAY,CAACC,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAC7Bb,QAAQ,CAACc,YAAY,CAAC;IACtB;IACAZ,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACO,SAAS,CAACG,YAAY,CAAC,CAAC;EAC7D,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAIH,KAAK,IAAK;IACnC,IAAIC,YAAY,GAAG,CAAC,GAAGf,KAAK,CAAC;IAE7B,IACEe,YAAY,CAACD,KAAK,CAAC,IACnB,OAAOC,YAAY,CAACD,KAAK,CAAC,CAACI,SAAS,KAAK,WAAW,EACpD;MACAH,YAAY,CAACD,KAAK,CAAC,CAACI,SAAS,GAAG,CAACH,YAAY,CAACD,KAAK,CAAC,CAACI,SAAS;MAC9DjB,QAAQ,CAACc,YAAY,CAAC;MACtB;MACAZ,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACO,SAAS,CAACG,YAAY,CAAC,CAAC;IAC7D;EACF,CAAC;;EAED;EACA,MAAMI,gBAAgB,GAAGA,CAACL,KAAK,EAAEM,WAAW,KAAK;IAC/C;IACA,IAAIL,YAAY,GAAG,CAAC,GAAGf,KAAK,CAAC;;IAE7B;IACA,IAAIe,YAAY,CAACD,KAAK,CAAC,EAAE;MACvB;MACAC,YAAY,CAACD,KAAK,CAAC,CAACO,IAAI,GAAGD,WAAW;;MAEtC;MACAnB,QAAQ,CAACc,YAAY,CAAC;MACtB;MACAZ,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACO,SAAS,CAACG,YAAY,CAAC,CAAC;IAC7D;EACF,CAAC;EAED,oBACElB,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAAyB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGzB7B,OAAA,CAACF,OAAO;MAACgC,QAAQ,EAAEpB;IAAc;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAGnC1B,KAAK,CAAC4B,GAAG,CAAC,CAACC,CAAC,EAAEf,KAAK,kBAClBjB,OAAA,CAACJ,IAAI;MAEHqB,KAAK,EAAEA,KAAM,CAAC;MAAA;MACde,CAAC,EAAEA,CAAE;MACLC,aAAa,EAAGhB,KAAK,IAAKG,iBAAiB,CAACH,KAAK,CAAE;MACnDiB,QAAQ,EAAGjB,KAAK,IAAKD,gBAAgB,CAACC,KAAK,CAAE;MAC7CkB,YAAY,EAAGZ,WAAW,IAAKD,gBAAgB,CAACL,KAAK,EAAEM,WAAW;IAAE,GAL/DN,KAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMX,CACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC3B,EAAA,CAhFQD,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AAkFjB,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}